import { Aperture, BarChart3, LayoutGrid, Activity, Layers, Dna, Trophy } from "lucide-react";

export const projects = [
  {
    title: "2025 iGEM Hyaluronic Website - ULethbridge Team",
    blurb: "Sole developer responsible for designing, deploying, and maintaining the team’s competition wiki. Built and automated CI/CD pipelines with GitLab Auto DevOps, ensuring seamless releases and reliable performance under strict WikiFreeze deadlines.",
    description: "Collaborated with the ULethbridge iGEM 2025 team to build and maintain the competition wiki and codebase on GitLab, contributing to 70+ commits across multiple branches. Set up and maintained GitLab Auto DevOps for continuous integration and deployment, aligning with iGEM’s wiki requirements and pushing to the public 2025 iGEM site. Focused on clean structure, reliable builds, and smooth releases under tight WikiFreeze timelines.",
    meta: ["React", "TypeScript", "Tailwind", "CI/CD"],
    icon: Dna,
    animation: "bento2-float 6s ease-in-out infinite",
    colors: ["#ffffff", "#A5B4FC", "#C7D2FE"],
    image: "/projects/system-patterns.jpg",
    link: "https://2025.igem.wiki/ulethbridge/",
  },
  {
    title: "Signal Balance",
    blurb: "Monochrome surfaces and tight contrast ratios keep focus on intent over ornamentation.",
    description: "A minimal UI toolkit focused on typography, spacing, and visual hierarchy.",
    meta: ["CSS", "JavaScript", "Design"],
    icon: BarChart3,
    animation: "bento2-pulse 4s ease-in-out infinite",
    colors: ["#FED7AA", "#ffffff", "#FDBA74"],
    image: "/projects/signal-balance.jpg",
    link: "https://github.com/yourusername/signal-balance",
  },
  {
    title: "Olympic Predictor",
    blurb: "Built an ML model using scikit-learn to forecast which country would win the 2024 Olympics, leveraging historical medal counts, GDP, and demographic data.",
    description: "Designed and implemented a machine learning model in Python (scikit-learn) to predict medal outcomes for the 2024 Olympics. Collected and preprocessed historical Olympic results, GDP, and demographic data, then applied regression and classification techniques to forecast country-level performance. Conducted feature engineering and model evaluation to improve accuracy, while building a reproducible ML pipeline with clear documentation for experimentation and results.",
    meta: ["D3.js", "React", "SVG"],
    icon: Trophy,
    animation: "bento2-tilt 5.5s ease-in-out infinite",
    colors: ["#BAE6FD", "#ffffff", "#7DD3FC"],
    image: "/projects/structured-flow.jpg",
    link: "https://github.com/yourusername/structured-flow",
  },
  {
    title: "PlatePal",
    blurb: "PlatePal uses Q-learning and web scraping to optimize grocery picks for low-income users—balancing budgets and nutrition.",
    description: "PlatePal is a tool to help low-income individuals maximize grocery value: it scrapes real-time deals from Flipp, localizes nearby stores, and recommends items across carbs, dairy, produce, and protein categories. Given a user’s budget, it uses a Q-learning agent to optimize the selection of items under cost constraints. The project combines web scraping, reinforcement learning, and optimization to tackle food insecurity through smart recommendation.",
    meta: ["Web Scraping", "Reinforcement Learning", "Recommender Systems"],
    icon: Activity,
    animation: "bento2-drift 8s ease-in-out infinite",
    colors: ["#ffffff", "#F9A8D4", "#FBCFE8"],
    image: "/projects/clean-signals.jpg",
    link: "https://github.com/yourusername/clean-signals",
  },
  {
    title: "Rat Spike-Count Generator",
    blurb: "Built a GAN in TensorFlow/Keras to generate realistic neural spike-count data from rat recordings.",
    description: "Developed a GAN using TensorFlow/Keras to synthesize realistic neural spike-count images from rat firing data. Built end-to-end pipeline including data preprocessing, generator & discriminator networks, loss functions, and training regime.",
    meta: ["GAN", "Deep Learning", "TensorFlow", "Keras"],
    icon: Layers,
    animation: "bento2-glow 7s ease-in-out infinite",
    colors: ["#DDD6FE", "#ffffff", "#C4B5FD"],
    image: "/projects/quiet-energy.jpg",
    link: "https://github.com/Sabvl67/Rat-Spike-Count-Generator",
  },
];
